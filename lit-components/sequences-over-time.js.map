{"version":3,"file":"sequences-over-time.js","sourceRoot":"","sources":["src/sequences-over-time.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAC,IAAI,EAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAC,oBAAoB,EAAC,MAAM,QAAQ,CAAC;AAGrC,IAAM,iBAAiB,GAAvB,MAAM,iBAAkB,SAAQ,UAAU;IAA1C;;QAWL,YAAO,GAAG,EAAE,CAAC;QAML,iBAAY,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;YACpC,IAAI,EAAE,KAAK,EAAE,CAAC,OAAO,CAAC,EAAE,EAAC,MAAM,EAAC,EAAE,EAAE,CAAC,oBAAoB,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC;YAChG,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;SAC3B,CAAC,CAAA;IAqBJ,CAAC;IA5BS,aAAa;QACnB,OAAO,IAAI,CAAC,OAAO,KAAK,EAAE,CAAC;IAC7B,CAAC;IAOQ,MAAM;QACb,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE;YACzB,OAAO,IAAI,CAAA;;OAEV,CAAC;SACH;QAED,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;YAC9B,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAA;;;OAGlB;YACD,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAA;;UAEpB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;OACvB;YACD,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAA,aAAa,CAAC,MAAM;SACvC,CAAC,CAAC;IACL,CAAC;;AAvCe,wBAAM,GAAG,GAAG,CAAA;;;;;;;GAO3B,AAPqB,CAOpB;AAGF;IADC,QAAQ,EAAE;kDACE;AAXF,iBAAiB;IAD7B,aAAa,CAAC,qBAAqB,CAAC;GACxB,iBAAiB,CAyC7B","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {Task} from '@lit/task';\nimport {getGlobalDataManager} from \"./data\";\n\n@customElement('sequences-over-time')\nexport class SequencesOverTime extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n      border: solid 3px gray;\n      padding: 16px;\n      max-width: 800px;\n    }\n  `;\n\n  @property()\n  country = '';\n\n  private validateProps() {\n    return this.country !== '';\n  }\n\n  private fetchingTask = new Task(this, {\n    task: async ([country], {signal}) => getGlobalDataManager().getSequencesPerYear(country, signal),\n    args: () => [this.country]\n  })\n\n  override render() {\n    if (!this.validateProps()) {\n      return html`\n        Errors: properties are not valid.\n      `;\n    }\n\n    return this.fetchingTask.render({\n      pending: () => html`\n        <h1>Sequences over time</h1>\n        Loading...\n      `,\n      complete: (data) => html`\n        <h1>Sequences over time</h1>\n        ${JSON.stringify(data)}\n      `,\n      error: (e) => html`<p>Error: ${e}</p>`\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sequences-over-time': SequencesOverTime;\n  }\n}\n"]}